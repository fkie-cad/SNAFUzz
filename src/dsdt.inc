// DeviceOp(package_size 111, \_SB_.VMOD){
//     NameOp(_HID, "ACPI0004")
//     NameOp(_UID, ZeroOp)
//     NameOp(_CRS, BufferOp(package_size 4e, Byte(0x4a)){
//         DWordMemory(/*length*/17, /*resource_type*/0, /*general_flags*/c, /*type_specifier_flags*/3, /*granularity*/0, /*minimum*/f8000000, /*maximum*/8000000, /*translation_offset*/0, /*length*/ffffffff)
//         QWordMemory(/*length*/2b, /*resource_type*/0, /*general_flags*/c, /*type_specifier_flags*/3, /*granularity*/0, /*minimum*/fe0000000, /*maximum*/20000000, /*translation_offset*/0, /*length*/fffffffff)
//         EndTag(0x0)
//     })
//     CreateDWordFieldOp(_CRS, Byte(0x0a), MIN6)
//     CreateDWordFieldOp(_CRS, Byte(0x0e), MAX6)
//     CreateDWordFieldOp(_CRS, Byte(0x16), LEN6)
//     CreateQWordFieldOp(_CRS, Byte(0x28), MIN7)
//     CreateQWordFieldOp(_CRS, Byte(0x30), MAX7)
//     CreateQWordFieldOp(_CRS, Byte(0x40), LEN7)
//     MethodOp(package_size 59, _INI, 0) {
//         StoreOp(DWord(0xf8000000), MIN6),
//         StoreOp(DWord(0x08000000), LEN6),
//         StoreOp(DWord(0x08000000), Local0),
//         AddOp(MIN6, DecrementOp(Local0), MAX6),
//         ShiftLeftOp(DWord(0x0000fe00), Byte(0x14), Local1),
//         ShiftLeftOp(DWord(0x00000200), Byte(0x14), Local2),
//         StoreOp(Local1, MIN7),
//         StoreOp(Local2, LEN7),
//         StoreOp(Local2, Local0),
//         AddOp(MIN7, DecrementOp(Local0), MAX7),
//     }
// }

0x5b, 0x82, 0x41, 0x11, 0x5c, 0x2e, 0x5f, 0x53, 0x42, 0x5f, 0x56, 0x4d, 0x4f, 0x44, 
0x08, 0x5f, 0x48, 0x49, 0x44, 0x0d, 0x41, 0x43, 0x50, 0x49, 0x30, 0x30, 0x30, 0x34, 0x00, 
0x08, 0x5f, 0x55, 0x49, 0x44, 0x00, 
0x08, 0x5f, 0x43, 0x52, 0x53, 0x11, 0x4e, 0x04, 0x0a, 0x4a, 
0x87, 0x17, 0x00, 0x00, 0x0c, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 
0x8a, 0x2b, 0x00, 0x00, 0x0c, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 
0x79, 0x00, 
0x8a, 0x5f, 0x43, 0x52, 0x53, 0x0a, 0x0a, 0x4d, 0x49, 0x4e, 0x36, 
0x8a, 0x5f, 0x43, 0x52, 0x53, 0x0a, 0x0e, 0x4d, 0x41, 0x58, 0x36, 
0x8a, 0x5f, 0x43, 0x52, 0x53, 0x0a, 0x16, 0x4c, 0x45, 0x4e, 0x36, 
0x8f, 0x5f, 0x43, 0x52, 0x53, 0x0a, 0x28, 0x4d, 0x49, 0x4e, 0x37, 
0x8f, 0x5f, 0x43, 0x52, 0x53, 0x0a, 0x30, 0x4d, 0x41, 0x58, 0x37, 
0x8f, 0x5f, 0x43, 0x52, 0x53, 0x0a, 0x40, 0x4c, 0x45, 0x4e, 0x37, 
0x14, 0x49, 0x05, 0x5f, 0x49, 0x4e, 0x49, 0x00, 
0x70, 0x0c, 0x00, 0x00, 0x00, 0xf8, 0x4d, 0x49, 0x4e, 0x36, 
0x70, 0x0c, 0x00, 0x00, 0x00, 0x08, 0x4c, 0x45, 0x4e, 0x36, 
0x70, 0x0c, 0x00, 0x00, 0x00, 0x08, 0x60, 
0x72, 0x4d, 0x49, 0x4e, 0x36, 0x76, 0x60, 0x4d, 0x41, 0x58, 0x36, 
0x79, 0x0c, 0x00, 0xfe, 0x00, 0x00, 0x0a, 0x14, 0x61, 
0x79, 0x0c, 0x00, 0x02, 0x00, 0x00, 0x0a, 0x14, 0x62, 
0x70, 0x61, 0x4d, 0x49, 0x4e, 0x37, 
0x70, 0x62, 0x4c, 0x45, 0x4e, 0x37, 
0x70, 0x62, 0x60, 
0x72, 0x4d, 0x49, 0x4e, 0x37, 0x76, 0x60, 0x4d, 0x41, 0x58, 0x37, 

// DeviceOp(package_size 3d, \_SB_.VMOD.APIC){
//     NameOp(_HID, DWord(0x0300d041))
//     NameOp(_CRS, BufferOp(package_size 1d, Byte(0x1a)){
//         Memory32Fixed(9, ReadWrite, fee00000, 1000)
//         Memory32Fixed(9, ReadWrite, fec00000, 1000)
//         EndTag(0x0)
//     })
// }

0x5b, 0x82, 0x3d, 0x5c, 0x2f, 0x03, 0x5f, 0x53, 0x42, 0x5f, 0x56, 0x4d, 0x4f, 0x44, 0x41, 0x50, 0x49, 0x43, 
0x08, 0x5f, 0x48, 0x49, 0x44, 0x0c, 0x41, 0xd0, 0x00, 0x03, 
0x08, 0x5f, 0x43, 0x52, 0x53, 0x11, 0x1d, 0x0a, 0x1a, 
0x86, 0x09, 0x00, 0x01, 0x00, 0x00, 0xe0, 0xfe, 0x00, 0x10, 0x00, 0x00, 
0x86, 0x09, 0x00, 0x01, 0x00, 0x00, 0xc0, 0xfe, 0x00, 0x10, 0x00, 0x00, 
0x79, 0x00, 

// DeviceOp(package_size 81, \_SB_.VMOD.VMBS){
//     NameOp(STA_, Byte(0x0f))
//     NameOp(_ADR, ZeroOp)
//     NameOp(_DDN, "VMBUS")
//     NameOp(_HID, "VMBus")
//     NameOp(_UID, ZeroOp)
//     MethodOp(package_size 11, _DIS, 0) {
//         AndOp(STA_, Byte(0x0d), STA_),
//     }
//     MethodOp(package_size 11, _PS0, 0) {
//         OrOp(STA_, Byte(0x0f), STA_),
//     }
//     MethodOp(package_size b, _STA, 0) {
//         Return(STA_),
//     }
//     NameOp(_PS3, ZeroOp)
//     NameOp(_CRS, BufferOp(package_size 9, Byte(0x06)){
//         IRQ(20, 1)
//         EndTag(0x0)
//     })
// }

0x5b, 0x82, 0x41, 0x08, 0x5c, 0x2f, 0x03, 0x5f, 0x53, 0x42, 0x5f, 0x56, 0x4d, 0x4f, 0x44, 0x56, 0x4d, 0x42, 0x53, 
0x08, 0x53, 0x54, 0x41, 0x5f, 0x0a, 0x0f, 
0x08, 0x5f, 0x41, 0x44, 0x52, 0x00, 
0x08, 0x5f, 0x44, 0x44, 0x4e, 0x0d, 0x56, 0x4d, 0x42, 0x55, 0x53, 0x00, 
0x08, 0x5f, 0x48, 0x49, 0x44, 0x0d, 0x56, 0x4d, 0x42, 0x75, 0x73, 0x00, 
0x08, 0x5f, 0x55, 0x49, 0x44, 0x00, 
0x14, 0x11, 0x5f, 0x44, 0x49, 0x53, 0x00, 
0x7b, 0x53, 0x54, 0x41, 0x5f, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x5f, 
0x14, 0x11, 0x5f, 0x50, 0x53, 0x30, 0x00, 
0x7d, 0x53, 0x54, 0x41, 0x5f, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x5f, 
0x14, 0x0b, 0x5f, 0x53, 0x54, 0x41, 0x00, 
0xa4, 0x53, 0x54, 0x41, 0x5f, 
0x08, 0x5f, 0x50, 0x53, 0x33, 0x00, 
0x08, 0x5f, 0x43, 0x52, 0x53, 0x11, 0x09, 0x0a, 0x06, 
0x23, 0x20, 0x00, 0x01, 
0x79, 0x00, 

